# Function used to add the git branch name to PS1
if [ -x "$(command -v git)" ]; then
	function parse_git_status {
		if [ -z "$NOPATHBRANCHES" ]; then
			local branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
			[[ -z $branch ]] && return
			local status=$(git status 2> /dev/null)
			local result=$branch
			[[ "$status" = *deleted:* ]] && result=${result}-
			[[ "$status" = *modified:* ]] && result=${result}*
			[[ "$status" = *Untracked\ files:* ]] && result=${result}+
			printf " [$result]"
		fi
	}
else
	function parse_git_status {
		return
	}
fi

# Run top showing process with given name
function ptop {
    top -p `pgrep $1 | head -20 | tr "\\n" "," | sed 's/,$//'`;
}

# Set the prompt
function set_prompt {

    # Dont try to set the prompt if there's no interactive shell
    case $- in
        *i*) ;;
        *) return;;
    esac

    black="\[$(tput setaf 0)\]"
    blue="\[$(tput setaf 4)\]"
    green="\[$(tput setaf 2)\]"
    red="\[$(tput setaf 1)\]"
    reset="\[$(tput sgr0)\]"

    # Host name color
    if [ -z "$HOSTCOLOR" ]; then
        HOSTCOLOR="\[\e[0;30m\]"
    fi

    # Branch Color
    BRANCHCOLOR="\[\e[0;31m\]"

    # User color
    if [ $(id -ru) == '0' ]; then
        USERCOLOR="\[$red\]"
    else
        USERCOLOR=$HOSTCOLOR
    fi

    # Set color prompt
    PS1="${black}["
    PS1+="${USERCOLOR}\u"
    PS1+="${black}@"
    PS1+="${HOSTCOLOR}\h"
    PS1+="${BRANCHCOLOR}\$(parse_git_status)"
    PS1+="${blue} \w"
    PS1+="${black}]$ ${reset}"

    export PS1
}
